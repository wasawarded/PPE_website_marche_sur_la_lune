   English-like syntax. We will demonstrate how these reasoning rules have
   equivalent representation both as RDF descriptions and as logic
   formulae. We will also show how an automated compilation between these
--

   Metalog provides a "logical" view of metadata present on the web. The
   Metalog approach is composed by two major layers.
--
   The first layer consists in an enrichment of the RDF model. Metalog
   provides way to express logical relationships like "and", "or" and so
   on, and to build up complex inference rules that encode logical
   reasoning. This "semantic layer" builds on top of RDF using a so-called
--

   The second layer consists of a "logical interpretation" of RDF data
   (optionally enriched with the semantic schema) into logic. This way,
   the understood semantics of RDF is unwound into its logical components.
   This means that every reasonment on RDF data can be performed acting
   upon the corresponding logical view, providing a neat and powerful way
   to reason about data. We call this level of Metalog the Metalog logic
   level.
--
   will be: in the "building" process of setting up the data and the
   logical inferences, the user will be able to simply express these using
   the Metalog language. This layer is translated into the Metalog model,
   and then using the Metalog logic interpretation, into logic. From here,
   classic inference engines can then be applied, like logic programming,
   datalog, theorem provers and so on. Also, all the already existing RDF
--

   We can extend RDF so that the mapping to logic is able to take
   advantage of all of the logical relationships present in logical
   systems: that is to say, behind the ability of expressing static facts,
   we want the ability to encode dynamic reasoning rules, like in logic
   programming.
--

   The metalog schema extends plain RDF with this "logical layer",
   enabling to express arbitrary logical relationships within RDF. In
   fact, the metalog schema provides more accessories besides the
--
   should keep in mind is therefore just that the Metalog model provides
   the "meta-logic" operators to reason with RDF statements.

--
   The first correspondence in Metalog is between the basic RDF data model
   and the predicates in logic. The RDF data model consists of so-called
   statements Statements are triples where there is a subject (the
   "resource"), a predicate (the "property"), and an object (the
   "literal"). Metalog views an RDF statement in the logical setting as
   just a binary predicate involving the subject and the literal. For
--
   invented the Web (formally, the RDF triple {invented, Tim Berners-Lee,
   Web}) is seen in logic as the predicate invented(Tim Berners-Lee, Web).
   So, in general RDF statements have a natural translation into logic
   predicates. The exceptions that Metalog does are for the so-called
--
   Bag(X_1,...,X_n)=Bag(X_p(1),...,X_p(n)) for every permutation p). So,
   in fact, Metalog logic is a kind of equational logic (see also later,
   in the case of the mathematical operators).
--
   Metalog extension: the connectors and, or and implies are interpreted
   as the logical conjunction, disjunction and implication, respectively.
   Variables are interpreted as logical variables. En passant, we mention
   the other extensions provided by Metalog, the not connector and the
--
   concerned, things are less easy: while for the other interpretation the
   logical interpretation is rather straightforward (in other words, in
   the almost totality of the useful logics, these operators have all the
   same interpretation), a logical interpretation of the not connector is
   not as plain: there are different alternatives to consider, giving
   different logics. The Metalog choice follows from the intrinsic nature
   of the World Wide Web (where the Metalog system is expected to be
--

   Summing up, the mapping between the Metalog model and logical formulas
   is then completely natural: for each RDF statement that does not use a
   metalog connector, there is a corresponding logical predicate as
   defined before. Then, the metalog connectors are translated into the
   corresponding logical connectors as described above.

--
   are:
     * then is a keyword for the logical implication (=>)
       For example,
       if SHE has a "degree" in "math" then SHE "is" "smart"
       is translated into the logical formula
       degree(SHE,"math") => is(SHE,"smart")
       (Note that, here and in the following examples, we provide directly
       the translation into the logical formula, to save space; a more
       detailed translation would have to also show the intermediate RDF
       model, which is in any case trivial to derive).
     * imply is a keyword for the logical implication (=>)
     * implies is a keyword for the logical implication (=>)
     * and can be either the metalog and (the "logical-and"), or it can be
       used to indicate the presence of an RDF Bag (the "bag-and"): this
--
       science" as well then SHE "is" "really smart".
       is translated into the logical formula
       (degree(SHE,"math") and degree(SHE,"computer science"))=>
--
       the "technical report 231" has as "authors" "Mary" and "John".
       is translated into the logical formula:
       authors("technical report 231",Bag("Mary","John"))
--
       this order.
       is translated into the logical formula:
       authors("technical report 231",Seq("Mary","John"))
--
       if SHE has a "degree" in "math" then SHE "is" not "stupid".
       is translated into the logical formula
       degree(SHE,"math") => not(is(SHE,"stupid"))
--
   Then, we disambiguate using the metalog keywords. The basic metalog
   mapping structure (here, we use a mapping directly to logic rather than
   to Metalog model for conciseness) follows the classic grammatical model
--
   then an object. This triple "subject predicate object" is naturally
   translated into the logic binary predicate predicate(subject,object).
   On top of this "basic model" of translation, more sophisticated
--
   translate all what was to the left (say, obtaining #LEFT#), all what is
   to the right (say, obtaining #RIGHT#), and logically translate to
   "#LEFT# => #RIGHT#" (here, => denotes logical implication). Note that a
   "then" can generally occur only when a level 1 is expected
--
   If we find an "and": if the "and" occurs when a level 1 is expected,
   then it could be a logical-and or the bag-and; if there's a holder soon
   after the object to the right of the and, then it's a logical-and;
   otherwise, it's a bag-and, and the level still stays 3. If the "and"
--

   Logical-and translation: we have the logical translation "#LEFT# and
   #RIGHT#". For example, take the metalog sentence
--
   and where level 1 was expected: after "John" there is a holder
   ("good"), so it's a logical-and
   "John" level 1
--

   So, the final logical translation is

--
   Instead, the fact the ultimate point of the "Metalog chain" is the
   Metalog logic, leads itself to a natural definition of query:
   (constructive) satisfability. That is to say, any given logical formula
   can be queried along the database, to check whether it is satisfable or
--
   Note that the RDF metalog model and the corresponding translation into
   logical formulas in the Metalog logic is absolutely general. However,
   in practice, one need also to then be able to process the resulting
   logical formulas in an effective ways. In other words, while the
   Metalog model nicely extends RDF with the full power of first order
--
   side of the coin: how to process and effectively reason with all these
   logical inference rules.

   Metalog as such does not impose computability restriction, as its
   primary goal is to provide expressibility means to codify logical data
   and relationships (and relative queries). Then, it is up to the
   particular inference engine to try to effectively deal with the
   resulting logical knowledge basis. However, there are at least two
   restrictions of the logic that deserves particular attention: logic
   programming and datalog (see e.g. [1]). These paradigms are that they
--
   time. The interesting things that makes these languages particularly
   appealing in our case is due to the fact that both logic programming
   and datalog restrict to binary predicates: this means that RDF (without
   the ordering structures) is already directly mappable, via Metalog,
   into a logic program. Therefore, just relatively small syntactical
   constraints enables a metalog language program (and so, logic formula)
   to be ultimately processed in an effective way using an already
   existing  logic programming or datalog inference engine. This is indeed
   what we are currently doing with our current prototype: interfacing
   with existing logic programming/datalog systems (like, for example ,
   [8]).
--
   metalog language code does actually satisfy the corresponding
   restrictions such to be interpreted as a logic program, or as a datalog
   program. This is consistent with the general philosophy of Metalog as
--
   fact that the code indeed satisfies the appropriate syntactic
   restrictions. So far, there are two restriction tags, one for logic
   programming and the other for datalog. It is important to note that
--
   to an eventual application that tries to process the metalog code, that
   some particular inference engine (for logic programs, datalog programs,
   etc) could be profitably used. It is semantically transparent, since
--

   And, finally, this corresponds to the logical formula

--
   This formula is just a Horn clause, and as such it means it can be
   viewed as a logic program.

--
   "technical report 231", and that the language of "technical report 231"
   is "English". This, again, can be viewed as part of a logic program
   (technically, they are facts).
--

   Running this query in the corresponding logic program gives the result
   that Y="English", that is to say, the predicate speak("John","English")
