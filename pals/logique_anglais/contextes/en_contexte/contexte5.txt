   syntax. We will demonstrate how these reasoning rules have equivalent
   representation both as RDF descriptions and as logic programs. We will
   also show how an automated compilation between these translations is
--

   Metalog provides a "logical" view of metadata present on the Web. The
   Metalog approach is composed of several components.
--
   In the first component, a particular data semantics is established.
   Metalog provides way to express logical relationships such as "and",
   "or" and to build up complex inference rules that encode logical
   reasoning. This "semantic layer" builds on top of RDF using a so-called
--

   The second component consists of a "logical interpretation" of RDF data
   (optionally enriched with the semantic schema) into logic programming.
   This way, the understood semantics of RDF is unwielded into its logical
   components (a logic program, indeed). This means that every reasonment
   on RDF data can be performed acting upon the corresponding logical
   view, the logic program, providing a neat and powerful way to reason
   about data.
--
   The first correspondance in Metalog is between the basic RDF data model
   and the predicates in logic. The RDF data model consists of so-called
   statements. Statements are triples where there is a subject (the
   "resource"), a predicate (the "property"), and an object (the
   "literal"). Metalog views an RDF statement in the logical setting as
   just a binary predicate involving the subject and the literal. For
--
   invented the Web (formally, the RDF triple {invented, Tim Berners-Lee,
   Web}) is seen in logic programming as the predicate invented(Tim
   Berners-Lee, Web).
--
   Once we have estalished the basic correspondance between the basic RDF
   data model and predicates in logic, the next step becomes easy: we can
   extend RDF so that the mapping to logic is able to take advantage of
   all of the logical relationships present in logical systems: that is to
   say, beyond the ability of expressing static facts, we want the ability
   to encode dynamic reasoning rules, like in logic programming.

   In order to do so, we need at least:
     * the standard logical connectors (and, or, not)
     * variables

   The Metalog schema extends plain RDF with this "logical layer",
   enabling the expression of arbitrary logical relationships within RDF.
   In fact, the Metalog schema provides more accessories besides the
--
   should keep in mind is just that the Metalog schema provides the
   "meta-logic" operators to reason with RDF statements.

--

   The mapping between "metalog RDF" and logical formulas is then
   completely natural: for each RDF statement that does not use a Metalog
   connector, there is a corresponding logical predicate as defined
   before. Then, the metalog connectors are translated into the
   corresponding logical connectors in the natural way (so, for instance,
   the metalog and connector is mapped using logical conjunction, while
   the metalog or connector is mapped using logical disjunction).

--
   Note that the RDF metalog schema and the corresponding translation into
   logical formulas is absolutely general. However, in practicse, one need
   also to then be able to process the resulting logical formulas in an
   effective ways. In other words, while the RDF metalog schema nicely
--
   other, computational, side of the coin: how to process and effectively
   reason with all these logical inference rules.

--
   expressible enough, and also computationally feasible: our choice went
   to logic programming. Logic programming (see e.g. [1]) is a well known
   programming paradigm that selects a subset of full first-order
--
   expressive paradigm, and has the further advantage that it has been
   widely studied in the database community (a subset of logic
   programming, datalog, has even the advantage of having computations
--
   expressibility of the language must fit within the one provided by
   logic programming.

--
   are:
     * then is a keyword for the logical implication (=>)
       For example,
       if SHE has a "degree" in "math" then SHE "is" "smart"
       is translated into the logical formula
       degree(SHE,"math") => is(SHE,"smart")
       (Note that, here and in the following examples, we provide directly
       the translation into the logical formula, to save space; a more
       detailed translation would have to also show the intermediate RDF
       model, which is in any case trivial to derive).
     * imply is a keyword for the logical implication (=>)
     * implies is a keyword for the logical implication (=>)
     * and can be either the metalog and, or it can be used to indicate
--
       science" as well then SHE "is" "really smart".
       is translated into the logical formula
       (degree(SHE,"math") and degree(SHE,"computer science"))=>
--
       the "technical report 231" has as "authors" "Mary" and "John".
       is translated into the logical formulas (the translation here is
       more involved since the RDF Bag construct is used):
--
       this order.
       is translated into the logical formulas (the translation here is
       more involved since the RDF Bag construct is used):
--
     * not can be combined with any other metalog constructs, and its
       interpretation is logical negation.
       For example,
       if SHE has a "degree" in "math" then SHE "is" not "stupid".
       is translated into the logical formula
       degree(SHE,"math") => not(is(SHE,"stupid"))
--

   And, finally, this corresponds to the logical formula

--

   Running this query in the corresponding logic program gives the result
   that Y="English", that is to say, the predicate speak("John","English")
--

   The use of Web infrastructure to accommodate logic programs has been
   suggested by (Sandevall, 1996) and (Loke & Davidson, 1996). The latter
   approach suggests using familiar logic program notation to place facts
   and queries on HTML pages. The embedded rules also have the ability to
--
   fast writing of complex relationships, but also an extremely high
   readability. Finally, it can be used even without the logical
   extensions, just to provide a user-friendly interface to RDF. Future
--
    6. Niemel√§, I., Simons, P. (1997). Smodels -- an implementation of the
       stable model and well-founded semantics for normal logic programs
       Proc. of the 4th Int. Conf. on Logic Programming and Non-Monotonic
